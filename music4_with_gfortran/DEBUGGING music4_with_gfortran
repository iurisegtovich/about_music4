DEBUG1:

[in]
connects.F90
[before]
<708>     Integer, Dimension(Size(connect,1)) :: atomlist, all
[now]
<708>     Integer, Dimension(Size(connect,1)) :: natomlist, all
[before]
      nxaway = connects_atomsxaway(connect,i,xaway,atomlist,paths)
[now]
      nxaway = connects_atomsxaway(connect,i,xaway,natomlist,paths)

[in]
config.F90
[before]
  Subroutine config_getv(sorbates,sorb,vpntr)
    Type(AtMolCoords), Dimension(:), Intent(In), Target :: sorbates
    Integer, Intent(In) :: sorb
    Type(VecType), Dimension(:,:), Pointer :: vpntr
    Integer :: natoms, nmoles

    If (Associated(sorbates(sorb)%coords)) Then
      natoms = config_getnatoms(sorbates,sorb)
      nmoles = config_getnmoles(sorbates,sorb)
      vpntr => sorbates(sorb)%coords(1:natoms,1:nmoles)%v
    Else
      nullify(vpntr)
    End If
  End Subroutine config_getv
[now]
  Subroutine config_getv(sorbates,sorb,vpntr)
    Type(AtMolCoords), Dimension(:), Intent(In), Target :: sorbates
    Integer, Intent(In) :: sorb
    Type(VecType), Dimension(:,:), Pointer :: vpntr
    !need array of pointers!
    Type(RectCoords), pointer ::temp(:,:)
    Integer :: natoms, nmoles
integer::i,j

    If (Associated(sorbates(sorb)%coords)) Then
      natoms = config_getnatoms(sorbates,sorb)
      nmoles = config_getnmoles(sorbates,sorb)
      temp=>sorbates(sorb)%coords(1:natoms,1:nmoles)
      do i=1,natoms 
        do j=1,nmoles
          vpntr(i,j) => temp(i,j)%v
        enddo
      enddo
    Else
      nullify(vpntr)
    End If
  End Subroutine config_getv
